package jonl.jgl.utils;

public class Presets {

    private static void version(StringBuilder sb, int version) {
        sb.append("#version "+version+"\n");
        if (version<330) {
        sb.append("#extension GL_ARB_explicit_attrib_location : enable \n");
        }
    }
    
    public static String basicVSSource(int version) {
        StringBuilder sb = new StringBuilder();
        version(sb,version);
        sb.append("layout (location = 0) in vec4 vertex;");
        sb.append("layout (location = 1) in vec3 normal;");
        sb.append("layout (location = 2) in vec2 texCoord;");
        sb.append("out vec2 vTexCoord;");
        sb.append("uniform mat4 MVP;");
        sb.append("void main() {");
        sb.append("    gl_Position = MVP * vertex;");
        sb.append("    vTexCoord = texCoord;");
        sb.append("}");
        return sb.toString();
    }
    
    public static String basicFSSource(int version) {
        StringBuilder sb = new StringBuilder();
        version(sb,version);
        sb.append("in vec2 vTexCoord;");
        sb.append("uniform sampler2D texture;");
        sb.append("void main() {");
        sb.append("    gl_FragColor = texture2D(texture,vTexCoord);");
        sb.append("}");
        return sb.toString();
    }
    
    public static String fontVSSource(int version) {
        return basicVSSource(version);
    }
    
    public static String fontFSSource(int version) {
        StringBuilder sb = new StringBuilder();
        version(sb,version);
        sb.append("in vec2 vTexCoord;");
        sb.append("uniform sampler2D texture;");
        sb.append("uniform vec4 fontColor;");
        sb.append("void main() {");
        sb.append("    vec4 texColor = texture2D(texture,vTexCoord);");  
        sb.append("    gl_FragColor = texColor * fontColor;");
        sb.append("    gl_FragColor = vec4(1,1,1,texColor.w) * fontColor;");
        sb.append("}");
        return sb.toString();
    }
    
    
    public static String solidVSSource(int version) {
        StringBuilder sb = new StringBuilder();
        version(sb,version);
        sb.append("layout (location = 0) in vec4 vertex;");
        sb.append("uniform mat4 MVP;");
        sb.append("void main() {");
        sb.append("    gl_Position = MVP * vertex;");
        sb.append("}");
        return sb.toString();
    }
    
    public static String solidFSSource(int version) {
        StringBuilder sb = new StringBuilder();
        version(sb,version);
        sb.append("uniform vec4 color;");
        sb.append("void main() {");
        sb.append("    gl_FragColor = color;");
        sb.append("}");
        return sb.toString();
    }
    
    

    public static MeshData rectMesh() {
        float[] vertices = new float[]{
            -0.5f, -0.5f, 0.0f,
            0.5f, -0.5f, 0.0f,
            0.5f, 0.5f, 0.0f,
            -0.5f, 0.5f, 0.0f,
        };
        float[] normals = new float[]{
            0.0f, 0.0f, -1.0f,
            0.0f, 0.0f, -1.0f,
            0.0f, 0.0f, -1.0f,
            0.0f, 0.0f, -1.0f,
        };
        float[] texCoords = new float[]{
            0.0f, 1.0f,
            1.0f, 1.0f,
            1.0f, 0.0f,
            0.0f, 0.0f,
        };
        int[] indices = new int[]{
            0,
            1,
            2,
            0,
            2,
            3,
        };
        MeshData md = new MeshData(vertices,normals,texCoords,indices);
        return md;
    }
    
    public static MeshData circleMesh() {
        float[] vertices = new float[]{
            0.049009f, 0.497592f, 0.0f,
            -0.497592f, 0.049008f, 0.0f,
            -0.049008f, -0.497593f, -0.0f,
            0.0f, 0.5f, 0.0f,
            -0.024532f, 0.499397f, 0.0f,
            0.024534f, 0.499397f, 0.0f,
            -0.121489f, -0.485016f, -0.0f,
            -0.097544f, -0.490393f, -0.0f,
            -0.073364f, -0.494589f, -0.0f,
            -0.401603f, -0.297851f, -0.0f,
            -0.277784f, -0.415736f, -0.0f,
            -0.415734f, -0.277787f, -0.0f,
            -0.145141f, 0.47847f, 0.0f,
            -0.073364f, 0.494588f, 0.0f,
            -0.121489f, 0.485016f, 0.0f,
            -0.191341f, 0.46194f, 0.0f,
            -0.213777f, 0.451995f, 0.0f,
            -0.168444f, 0.470772f, 0.0f,
            -0.277785f, 0.415735f, 0.0f,
            -0.257051f, 0.428864f, 0.0f,
            -0.297849f, 0.401604f, 0.0f,
            -0.317196f, 0.386505f, 0.0f,
            -0.353553f, 0.353553f, 0.0f,
            -0.370475f, 0.335779f, 0.0f,
            -0.335779f, 0.370476f, 0.0f,
            -0.386505f, 0.317197f, 0.0f,
            -0.401604f, 0.297849f, 0.0f,
            -0.415735f, 0.277785f, 0.0f,
            -0.428864f, 0.257051f, 0.0f,
            -0.494588f, 0.073364f, 0.0f,
            -0.46194f, 0.191341f, 0.0f,
            -0.451995f, 0.213777f, 0.0f,
            -0.470772f, 0.168444f, 0.0f,
            -0.47847f, 0.145142f, 0.0f,
            -0.490393f, 0.097544f, 0.0f,
            -0.485016f, 0.121489f, 0.0f,
            0.47847f, 0.145142f, 0.0f,
            0.451995f, 0.213777f, 0.0f,
            0.485016f, 0.12149f, 0.0f,
            -0.5f, -1.0E-6f, 0.0f,
            -0.497592f, -0.04901f, -0.0f,
            -0.499398f, 0.024533f, 0.0f,
            -0.499398f, -0.024535f, -0.0f,
            -0.490392f, -0.097546f, -0.0f,
            -0.485015f, -0.121491f, -0.0f,
            -0.494588f, -0.073366f, -0.0f,
            -0.47847f, -0.145144f, -0.0f,
            -0.470772f, -0.168446f, -0.0f,
            -0.461939f, -0.191343f, -0.0f,
            0.213778f, -0.451995f, -0.0f,
            0.121491f, -0.485016f, -0.0f,
            0.168445f, -0.470772f, -0.0f,
            -0.44096f, -0.2357f, -0.0f,
            -0.428864f, -0.257053f, -0.0f,
            -0.386504f, -0.317198f, -0.0f,
            -0.370474f, -0.335781f, -0.0f,
            -0.451994f, -0.213779f, -0.0f,
            -0.317195f, -0.386507f, -0.0f,
            -0.297848f, -0.401605f, -0.0f,
            -0.335778f, -0.370477f, -0.0f,
            -0.145141f, -0.478471f, -0.0f,
            -0.191341f, -0.461941f, -0.0f,
            -0.25705f, -0.428865f, -0.0f,
            -0.213776f, -0.451996f, -0.0f,
            -0.168444f, -0.470773f, -0.0f,
            -0.024533f, -0.499398f, -0.0f,
            1.0E-6f, -0.5f, -0.0f,
            0.024535f, -0.499398f, -0.0f,
            0.049009f, -0.497593f, -0.0f,
            0.097546f, -0.490393f, -0.0f,
            0.073366f, -0.494588f, -0.0f,
            0.277785f, -0.415735f, -0.0f,
            0.235699f, -0.440961f, -0.0f,
            0.191342f, -0.46194f, -0.0f,
            0.257052f, -0.428864f, -0.0f,
            0.353553f, -0.353554f, -0.0f,
            0.386505f, -0.317197f, -0.0f,
            0.401604f, -0.29785f, -0.0f,
            0.497592f, -0.049009f, -0.0f,
            0.33578f, -0.370476f, -0.0f,
            0.370476f, -0.33578f, -0.0f,
            0.415735f, -0.277786f, -0.0f,
            0.428864f, -0.257052f, -0.0f,
            0.440961f, -0.235699f, -0.0f,
            0.097545f, 0.490392f, 0.0f,
            0.386505f, 0.317196f, 0.0f,
            0.47847f, -0.145143f, -0.0f,
            0.451995f, -0.213778f, -0.0f,
            0.470772f, -0.168445f, -0.0f,
            0.485016f, -0.121491f, -0.0f,
            0.490393f, -0.097546f, -0.0f,
            0.494588f, -0.073366f, -0.0f,
            0.499398f, -0.024534f, -0.0f,
            0.5f, -1.0E-6f, 0.0f,
            0.490393f, 0.097545f, 0.0f,
            0.494588f, 0.073365f, 0.0f,
            0.499398f, 0.024533f, 0.0f,
            0.497592f, 0.049008f, 0.0f,
            0.470772f, 0.168444f, 0.0f,
            0.46194f, 0.191341f, 0.0f,
            0.428864f, 0.257051f, 0.0f,
            0.401604f, 0.297849f, 0.0f,
            0.440961f, 0.235698f, 0.0f,
            0.415735f, 0.277785f, 0.0f,
            0.168445f, 0.470772f, 0.0f,
            0.277785f, 0.415734f, 0.0f,
            0.257051f, 0.428864f, 0.0f,
            0.335779f, 0.370475f, 0.0f,
            0.29785f, 0.401603f, 0.0f,
            0.191342f, 0.461939f, 0.0f,
            0.213778f, 0.451994f, 0.0f,
            0.145142f, 0.47847f, 0.0f,
            0.12149f, 0.485015f, 0.0f,
            0.073365f, 0.494588f, 0.0f,
            -0.049007f, 0.497592f, 0.0f,
            -0.235698f, 0.440961f, 0.0f,
            -0.353552f, -0.353555f, -0.0f,
            0.370476f, 0.335779f, 0.0f,
            0.353553f, 0.353553f, 0.0f,
            0.29785f, -0.401604f, -0.0f,
            -0.440961f, 0.235698f, 0.0f,
            -0.097544f, 0.490393f, 0.0f,
            0.46194f, -0.191342f, -0.0f,
            0.235698f, 0.44096f, 0.0f,
            0.317197f, -0.386505f, -0.0f,
            0.317197f, 0.386505f, 0.0f,
            0.145143f, -0.47847f, -0.0f,
            -0.235697f, -0.440962f, -0.0f,
        };
        float[] normals = new float[]{
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
            0.0f, -0.0f, 1.0f,
        };
        float[] texCoords = new float[]{
            0.702633f, 0.957149f,
            0.042843f, 0.702624f,
            0.29737f, 0.042842f,
            0.656841f, 0.974813f,
            0.633354f, 0.981938f,
            0.679955f, 0.966543f,
            0.232479f, 0.077525f,
            0.253535f, 0.064905f,
            0.275183f, 0.053335f,
            0.025194f, 0.343125f,
            0.1058f, 0.192332f,
            0.018067f, 0.366614f,
            0.512259f, 0.9999f,
            0.585476f, 0.992689f,
            0.536772f, 0.998696f,
            0.463211f, 0.998696f,
            0.438793f, 0.996291f,
            0.487718f, 0.9999f,
            0.366637f, 0.981938f,
            0.390445f, 0.987902f,
            0.343144f, 0.974812f,
            0.320032f, 0.966542f,
            0.275164f, 0.946653f,
            0.253517f, 0.935081f,
            0.297353f, 0.957148f,
            0.232466f, 0.922463f,
            0.212057f, 0.908826f,
            0.192342f, 0.894203f,
            0.173368f, 0.878631f,
            0.053337f, 0.724814f,
            0.12135f, 0.82661f,
            0.137832f, 0.844796f,
            0.105782f, 0.807639f,
            0.09116f, 0.787924f,
            0.064907f, 0.746462f,
            0.077524f, 0.767514f,
            0.999886f, 0.487724f,
            0.996277f, 0.561209f,
            0.998681f, 0.463209f,
            0.025186f, 0.656846f,
            0.012097f, 0.609546f,
            0.033453f, 0.679953f,
            0.018061f, 0.633357f,
            0.00371f, 0.561201f,
            0.001304f, 0.536776f,
            0.00731f, 0.585477f,
            1.0E-4f, 0.512257f,
            1.01E-4f, 0.487713f,
            0.001305f, 0.463202f,
            0.561212f, 0.003712f,
            0.463217f, 0.001303f,
            0.512267f, 1.0E-4f,
            0.007314f, 0.414494f,
            0.012104f, 0.390419f,
            0.033464f, 0.320014f,
            0.042858f, 0.297336f,
            0.003712f, 0.438774f,
            0.077543f, 0.232451f,
            0.09118f, 0.212044f,
            0.064924f, 0.253502f,
            0.212073f, 0.091159f,
            0.17339f, 0.121346f,
            0.121368f, 0.173364f,
            0.155202f, 0.13783f,
            0.192363f, 0.105776f,
            0.320046f, 0.03345f,
            0.343155f, 0.025182f,
            0.366642f, 0.018058f,
            0.390448f, 0.012096f,
            0.438796f, 0.003708f,
            0.414518f, 0.007309f,
            0.633368f, 0.018066f,
            0.58549f, 0.007314f,
            0.536784f, 0.001305f,
            0.609559f, 0.012102f,
            0.724823f, 0.053346f,
            0.767516f, 0.077532f,
            0.787922f, 0.091166f,
            0.957133f, 0.297351f,
            0.702634f, 0.042851f,
            0.746467f, 0.064915f,
            0.807633f, 0.105786f,
            0.826608f, 0.121358f,
            0.844795f, 0.137842f,
            0.746466f, 0.935085f,
            0.96653f, 0.679967f,
            0.908822f, 0.212068f,
            0.862152f, 0.155199f,
            0.894201f, 0.192354f,
            0.922456f, 0.232474f,
            0.935072f, 0.253524f,
            0.946641f, 0.275167f,
            0.966526f, 0.320028f,
            0.974796f, 0.34314f,
            0.996276f, 0.43879f,
            0.992675f, 0.414514f,
            0.981921f, 0.366629f,
            0.987886f, 0.39044f,
            0.999886f, 0.512268f,
            0.998682f, 0.53678f,
            0.987888f, 0.60956f,
            0.9748f, 0.656856f,
            0.992675f, 0.585489f,
            0.981925f, 0.633366f,
            0.807633f, 0.894214f,
            0.894204f, 0.807642f,
            0.878634f, 0.826615f,
            0.935076f, 0.746473f,
            0.908824f, 0.787929f,
            0.826607f, 0.878643f,
            0.844791f, 0.862162f,
            0.78792f, 0.908835f,
            0.767515f, 0.922468f,
            0.724822f, 0.946654f,
            0.609545f, 0.987902f,
            0.414515f, 0.992689f,
            0.053354f, 0.275147f,
            0.957139f, 0.702641f,
            0.946645f, 0.724829f,
            0.656852f, 0.02519f,
            0.155184f, 0.86215f,
            0.561194f, 0.996291f,
            0.878632f, 0.173383f,
            0.862148f, 0.844805f,
            0.679959f, 0.033458f,
            0.922458f, 0.767525f,
            0.487726f, 1.0E-4f,
            0.137848f, 0.155183f,
        };
        int[] indices = new int[]{
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            16,
            4,
            12,
            18,
            16,
            19,
            18,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            23,
            27,
            28,
            26,
            26,
            29,
            0,
            30,
            28,
            31,
            30,
            32,
            33,
            34,
            30,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            39,
            42,
            40,
            43,
            44,
            45,
            4,
            0,
            5,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            11,
            54,
            55,
            9,
            56,
            40,
            45,
            57,
            58,
            59,
            9,
            55,
            58,
            2,
            60,
            6,
            61,
            62,
            63,
            60,
            62,
            64,
            56,
            44,
            48,
            2,
            6,
            8,
            2,
            65,
            66,
            66,
            67,
            68,
            69,
            50,
            70,
            71,
            66,
            72,
            73,
            49,
            51,
            72,
            50,
            49,
            72,
            74,
            71,
            75,
            76,
            77,
            75,
            78,
            79,
            75,
            80,
            76,
            81,
            75,
            77,
            81,
            82,
            83,
            84,
            0,
            85,
            86,
            87,
            88,
            86,
            89,
            90,
            90,
            91,
            78,
            78,
            92,
            93,
            16,
            21,
            0,
            94,
            38,
            95,
            96,
            97,
            95,
            36,
            98,
            99,
            100,
            101,
            102,
            103,
            101,
            100,
            85,
            96,
            101,
            104,
            105,
            106,
            78,
            93,
            96,
            105,
            107,
            108,
            30,
            33,
            35,
            109,
            104,
            110,
            104,
            111,
            84,
            111,
            112,
            84,
            84,
            113,
            0,
            4,
            114,
            13,
            30,
            29,
            28,
            16,
            115,
            19,
            21,
            16,
            18,
            23,
            26,
            21,
            29,
            1,
            0,
            104,
            107,
            105,
            55,
            116,
            59,
            41,
            40,
            2,
            23,
            21,
            24,
            56,
            52,
            40,
            72,
            66,
            50,
            101,
            96,
            38,
            87,
            86,
            78,
            60,
            52,
            62,
            66,
            68,
            50,
            101,
            37,
            102,
            117,
            118,
            107,
            66,
            71,
            119,
            81,
            83,
            87,
            28,
            120,
            31,
            13,
            121,
            14,
            86,
            90,
            78,
            117,
            104,
            84,
            104,
            106,
            110,
            16,
            12,
            17,
            87,
            122,
            88,
            60,
            2,
            52,
            106,
            123,
            110,
            36,
            99,
            37,
            62,
            61,
            64,
            78,
            124,
            79,
            107,
            125,
            108,
            124,
            66,
            119,
            30,
            34,
            29,
            50,
            68,
            70,
            52,
            11,
            10,
            58,
            55,
            59,
            4,
            13,
            12,
            50,
            126,
            51,
            62,
            127,
            63,
            75,
            81,
            87,
            75,
            87,
            78,
            38,
            37,
            101,
            62,
            52,
            10,
            10,
            9,
            58,
            28,
            29,
            26,
            16,
            0,
            4,
            44,
            56,
            45,
            117,
            107,
            104,
            38,
            96,
            95,
            124,
            2,
            66,
            44,
            46,
            48,
            78,
            96,
            85,
            117,
            84,
            85,
            21,
            26,
            0,
            1,
            41,
            2,
            2,
            124,
            78,
            0,
            2,
            85,
            40,
            52,
            2,
            2,
            78,
            85,
        };
        MeshData md = new MeshData(vertices,normals,texCoords,indices);
        return md;

    }
    
}
